#include <iostream>
#include <fstream>
#include <string>
#include <chrono>
using namespace std;

/*RELATORIO
COM 10K(70%):
Selection: EXECUTA E ACHA
Insertion: EXECUTA E ACHA
Bubble: EXECUTA E ACHA
Shell: EXECUTA E ACHA
Quick: EXECUTA E ACHA
Merge: EXECUTA E ACHA
---------------------------
*/


#define FILENAME "NomeRG10K.txt"
//ter o nome aqui permite mudar o tamanho
//em um lugar so e afetar o codigo todo

struct NomeRGSeq{
  string nome = "";
  long int RG = 0;
};
//struct usada nas listas sequenciais

struct NomeRGEnc{
  string nome = "";
  long int RG = 0;
  struct NomeRGEnc *proximo = NULL;
};
//struct usada nas listas encadeadas
//duplamente encadeada

//============================================Funcoes

int getTamanho()
{
  int tamanho=0;
  string line;

  ifstream flista(FILENAME);
  if (flista.is_open())
  {
    while (getline(flista,line))
    {
      tamanho++;
    }
    flista.close();
  }

  else cout << "Unable to open file";

  return tamanho;
}

void ImprimeSequencial(int tamanho, NomeRGSeq ListaSequencial[])
{
  int n=0;

  while(n<tamanho)
  {
    cout << ListaSequencial[n].nome<<", "<<ListaSequencial[n].RG<<endl;
    n++;
  }
}

void ArmazenaSequencial(int *tamanho, NomeRGSeq ListaSequencial[])
{
  auto start = std::chrono::high_resolution_clock::now();
  string line;
  int pos, count = 0, copia = 0, comparacao = 0;

  //metodo pra ler o arquivo
  //e guardar na Struct Alocada

  ifstream flista(FILENAME);
  if (flista.is_open())
  {
    comparacao++;
    while (getline(flista,line))
    {
      comparacao++;
      pos = line.find(',');
      ListaSequencial[count].nome = line.substr(0,pos);
      //passa pro .nome tudo que ta antes da viRGula
      copia++;
      ListaSequencial[count].RG = stol(line.substr(pos+1));
      //passa pro .RG tudo que ta dps da viRGula
      copia++;
      count++;
    }
    flista.close();
  }
  else cout << "Unable to open file";

  cout << "Lista Sequencial OK\n";
  //ImprimeSequencial(*tamanho, ListaSequencial);

	auto result = std::chrono::high_resolution_clock::now() - start;
  long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
  cout << "Tempo de Execução: " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
  cout << "Foram feitas " << comparacao << "  comparacao(oes)" << endl;

}

void EscreveArquivoSeq(int tamanho, NomeRGSeq ListaSequencial[])
{

  int n=0;

  ofstream myfile ("ArquivoNovoSeq.txt");
  if (myfile.is_open()){
    while(n<tamanho)
    {
      myfile << ListaSequencial[n].nome << ", " <<ListaSequencial[n].RG<<endl;
      n++;

    }
    myfile.close();
  }else cout << "Unable to open file"<<endl;

}

NomeRGSeq * InsereInicioSeq(int *tamanho, NomeRGSeq ListaSequencial[])
{
  //Pra inserir no inicio, precisa passar todo i pra i+1


  NomeRGSeq *novo = new NomeRGSeq, *aux = new NomeRGSeq;
  int cont=0, copia=0, comparacao = 0;

  cout << "\nInsira o nome:";
  cin >> novo->nome;
  cout << "Insira o RG:";
  cin >> novo->RG;

  auto start = std::chrono::high_resolution_clock::now();
  //comeca aqui pra n contar o tempo de digitacao

	aux->nome='0';
  copia++;
	aux->RG='0';
  copia++;

  while(cont<*tamanho+1)
  {
    comparacao++;
    aux->nome=ListaSequencial[cont].nome;
    copia++;
		aux->RG=ListaSequencial[cont].RG;
		copia++;

    ListaSequencial[cont].nome=novo->nome;
		copia++;
    ListaSequencial[cont].RG=novo->RG;
		copia++;

    novo->nome=aux->nome;
		copia++;
    novo->RG=aux->RG;
		copia++;
    cont++;
  }


  (*tamanho)++;
  cout<<"Inserção Concluída no inicio da Lista Sequencial."<<endl;
  cout<<"\nLista Sequencial Atualizada:"<<endl;
  ImprimeSequencial(*tamanho, ListaSequencial);

  auto result = std::chrono::high_resolution_clock::now() - start;
  long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
  cout << "Tempo de Execução: " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
  cout << "Foram feitas " << comparacao << "  comparacao(oes)" << endl;

	return ListaSequencial;
}

NomeRGSeq * InsereFimSeq(int *tamanho, NomeRGSeq ListaSequencial[])
{
  int comparacao=0, copia = 0;

  cout << "\nInsira o nome:";
  cin >> ListaSequencial[*tamanho].nome;
  cout << "Insira o RG:";
  cin >> ListaSequencial[*tamanho].RG;
  (*tamanho)++;

  auto start = std::chrono::high_resolution_clock::now();

  cout<<"Inserção Concluída no fim da Lista Sequencial."<<endl;
  cout<<"\nLista Sequencial Atualizada:"<<endl;
  //ImprimeSequencial(*tamanho, ListaSequencial);

  auto result = std::chrono::high_resolution_clock::now() - start;
  long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
  cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
  cout << "Foram feitas " << comparacao << " comparacao(oes)" <<endl;

	return ListaSequencial;
}

NomeRGSeq * InserirNSeq(int *tamanho, NomeRGSeq ListaSequencial[])
{

	NomeRGSeq *novo = new NomeRGSeq, *aux = new NomeRGSeq;
  int cont, pos, copia = 0, comparacao = 0;

	cout << "\nInsira a posicao em que deseja colocar o novo registro:";
	cin >> pos;


  cout << "\nInsira o nome:";
  cin >> novo->nome;
  cout << "Insira o RG:";
  cin >> novo->RG;

  auto start = std::chrono::high_resolution_clock::now();

	aux->nome='0';
  copia++;
	aux->RG='0';
	copia++;

	cont=pos-1;


  while(cont<*tamanho+1){
    comparacao++;
    aux->nome=ListaSequencial[cont].nome;
    copia++;
		aux->RG=ListaSequencial[cont].RG;
		copia++;

    ListaSequencial[cont].nome=novo->nome;
		copia++;
		ListaSequencial[cont].RG=novo->RG;
		copia++;

    novo->nome=aux->nome;
    copia++;
		novo->RG=aux->RG;
		copia++;
    cont++;
    }

    (*tamanho)++;

  cout<<"Inserção Concluída na posição " << pos << " da Lista Sequencial."<<endl;
  cout<<"\nLista Sequencial Atualizada:"<<endl;
  ImprimeSequencial(*tamanho, ListaSequencial);
	auto result = std::chrono::high_resolution_clock::now() - start;
    long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
    cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
  cout << "Foram feitas " << comparacao << " comparacao(oes)" <<endl;
  return ListaSequencial;
}

NomeRGSeq * RemoveInicioSeq(int *tamanho, NomeRGSeq ListaSequencial[])
{
  auto start = std::chrono::high_resolution_clock::now();
  int cont=1, copia=0, comparacao=0;

  while(cont <= *tamanho){
    comparacao++;
		if(cont == *tamanho)
		{
      comparacao++;
			ListaSequencial[cont].nome=' ';
      copia++;
			ListaSequencial[cont].RG=' ';
      copia++;
		}
		else
		{
			ListaSequencial[cont-1].nome=ListaSequencial[cont].nome;
      copia++;
			ListaSequencial[cont-1].RG=ListaSequencial[cont].RG;
      copia++;
    }
		cont++;
	}

	(*tamanho)--;

  cout<<"Remoção Concluída no Início da Lista Sequencial."<<endl;
  cout<<"\nLista Sequencial Atualizada:"<<endl;
  ImprimeSequencial(*tamanho, ListaSequencial);

  auto result = std::chrono::high_resolution_clock::now() - start;
    long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
    cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
  cout << "Foram feitas " << comparacao << " comparacao(oes)" <<endl;
	return ListaSequencial;
}

NomeRGSeq * RemoveFimSeq(int *tamanho, NomeRGSeq ListaSequencial[])
{
  auto start = std::chrono::high_resolution_clock::now();

  int copia = 0, comparacao = 0;
  (*tamanho)--;

  ListaSequencial[*tamanho].nome=' ';
  copia++;
	ListaSequencial[*tamanho].RG=' ';
  copia++;

  cout<<"Remoção Concluída no final da Lista Sequencial."<<endl;
  cout<<"\nLista Sequencial Atualizada:"<<endl;
  ImprimeSequencial(*tamanho, ListaSequencial);
  auto result = std::chrono::high_resolution_clock::now() - start;
    long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
    cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
  cout << "Foram feitas " << comparacao << " comparacao(oes)" <<endl;
  return ListaSequencial;
}

NomeRGSeq * RemoveNSeq(int *tamanho, NomeRGSeq ListaSequencial[])
{
  int cont, n, copia = 0, comparacao = 0;

	cout << "\nInsira a posicao que deseja remover da Lista Sequencial:";
	cin >> n;

  auto start = std::chrono::high_resolution_clock::now();


	cont=n-1;

  while(cont<=*tamanho-1){
    comparacao++;
		if(cont==*tamanho-1)
		{
      comparacao++;
			ListaSequencial[cont].nome=' ';
      copia++;
			ListaSequencial[cont].RG=' ';
      copia++;
		}
		else
		{
			ListaSequencial[cont].nome=ListaSequencial[cont+1].nome;
			copia++;
      ListaSequencial[cont].RG=ListaSequencial[cont+1].RG;
      copia++;
    }
		cont++;
	}

	(*tamanho)--;

  cout<<"Remoção Concluída na posição "<< n <<" da Lista Sequencial"<<endl;
  cout<<"\nLista Sequencial Atualizada:"<<endl;
  ImprimeSequencial(*tamanho, ListaSequencial);

  auto result = std::chrono::high_resolution_clock::now() - start;
  long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
  cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
  cout << "Foram feitas " << comparacao << " comparacao(oes)" <<endl;

  return ListaSequencial;
}

void ProcurarRGSeq(int *tamanho, NomeRGSeq ListaSequencial[])
{
  auto start = std::chrono::high_resolution_clock::now();

  int RG;
	int n=0, flag = 0, copia = 0, comparacao = 0;;

	cout << "\nInsira o RG: ";
	cin >> RG;

	while(n< *tamanho){
    comparacao++;
		if(ListaSequencial[n].RG == RG)
		{
      comparacao++;
			flag=1;
			break;
		}
		n++;
	}
  if(flag==1)
		cout << "\n" << n+1 << " - " << ListaSequencial[n].nome << ", " << ListaSequencial[n].RG << endl;
	else if(flag==0)
		cout << "\nNao foi possivel encontrar o RG desejado" << endl;

	auto result = std::chrono::high_resolution_clock::now() - start;
    long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
    cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
  cout << "Foram feitas " << comparacao << " comparacao(oes)" <<endl;
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//METODOS DE SELECAO

void SelectionSortSequencial(int tamanho, NomeRGSeq ListaSequencial[]){
    auto start = std::chrono::high_resolution_clock::now();

	int contador1=0, contador2, posicao, Minimo, copia=0, comparacao=0;
	NomeRGSeq *Passador = new NomeRGSeq;
	Passador->nome="";
	Passador->RG= 0;

	while(contador1 < tamanho-1){
		Minimo=ListaSequencial[contador1].RG;
        copia++;
		contador2=contador1+1;
    while(contador2 < tamanho){
			if(ListaSequencial[contador2].RG < Minimo){
				Minimo = ListaSequencial[contador2].RG;
                copia++;
                comparacao++;
				posicao = contador2;
			}
			contador2++;
			if(Minimo != ListaSequencial[contador1].RG){
                swap(ListaSequencial[contador1], ListaSequencial[posicao]);
                copia++;
			}
		}


    /*
    Passador->nome = ListaSequencial[contador1].nome;
    Passador->RG = ListaSequencial[contador1].RG;
    copia++;
    //Passador recebe o nome e rg do antigo minimo

    ListaSequencial[contador1].nome = ListaSequencial[posicao].nome;
    ListaSequencial[contador1].RG = ListaSequencial[posicao].RG;
    copia++;
    //Guarda nome e rg do minimo atual

    ListaSequencial[posicao].nome = Passador->nome;
    ListaSequencial[posicao].RG = Passador->RG;
    copia++;
    //Passa o minimo pra sorted part of the vector
    */

    contador1++;
  }

	auto result = std::chrono::high_resolution_clock::now() - start;
  long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
  cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
	cout << "Foram feitas " << comparacao << " comparacao(oes)" << endl;
}

void InsertionSortSequencial(int tamanho, NomeRGSeq ListaSequencial[]){
	auto start = std::chrono::high_resolution_clock::now();
    int n=2, posicao, copia=0,comparacao=0;
	NomeRGSeq aux2, aux1;
	aux2.nome="";
	aux2.RG=0;


	if(ListaSequencial[0].RG > ListaSequencial[1].RG){
		comparacao++;
		swap(ListaSequencial[0], ListaSequencial[1]);
    copia++;

	}

	while (n < tamanho){
		posicao = 0;
		while(posicao < n){
			if(ListaSequencial[n].RG < ListaSequencial[posicao].RG){
        comparacao++;
				aux2 = ListaSequencial[posicao];
        copia++;
			  ListaSequencial[posicao] = ListaSequencial[n];
        copia++;

				for(int j = posicao+1; j<=n; j++){
					aux1 = ListaSequencial[j];
					ListaSequencial[j] = aux2;
					aux2 = aux1;
          copia++;
    		}
				break;
			}
			posicao++;
		}
		n++;
	}


  auto result = std::chrono::high_resolution_clock::now() - start;
  long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
  cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
	cout << "Foram feitas " << comparacao << " comparacao(oes)" << endl;

}

void BubbleSortSequencial(int tamanho, NomeRGSeq ListaSequencial[]){
	auto start = std::chrono::high_resolution_clock::now();
    int copia=0, comparacao=0, flag = 1, j = 0;
	NomeRGSeq aux;

  while (j <= tamanho){
    j++;
    while (flag==1){
      flag=0;
      for (int k=1; k < tamanho; k++){
        if (ListaSequencial[k].RG < ListaSequencial[k-1].RG){
					swap(ListaSequencial[k],ListaSequencial[k-1]);
          copia++;
					comparacao++;
					//ImprimeSequencial(tamanho, ListaSequencial);
					//cout << endl;
					flag=1;
        }
			}
    }
	}
  auto result = std::chrono::high_resolution_clock::now() - start;
  long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
  cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
	cout << "Foram feitas " << comparacao << " comparacao(oes)" << endl;
}

void ShellSortSequencial(int tamanho, NomeRGSeq ListaSequencial[]){
    auto start = std::chrono::high_resolution_clock::now();
    int copia=0, comparacao=0;

    int h = 1;
    int i, j;
    int rep = 0;

    while (h < tamanho) {
       h = h*3+1;
    }

    while (h > 1) {
        h /= 3;

        for (i = h; i < tamanho; i++) {
            NomeRGSeq aux = ListaSequencial[i];
            copia++;
            j = i;

            while (j >= h && aux.RG < ListaSequencial[j-h].RG) {
                comparacao++;
                ListaSequencial[j] = ListaSequencial[j-h];
                copia++;
                j -= h;
                rep++;
            }

            ListaSequencial[j] = aux;
            copia++;
        }
    }

	auto result = std::chrono::high_resolution_clock::now() - start;
    long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
    cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
	cout << "Foram feitas " << comparacao << " comparacao(oes)" << endl;

}

void swap(NomeRGSeq *a, NomeRGSeq *b){

  NomeRGSeq t = *a;
  *a = *b;
  *b = t;
}
int partition (NomeRGSeq ListaSequencial[], int low, int high, int &copia, int &comparacao){
  int pivot = high;
  int i = low-1;

  for (int j = low; j < high; j++)
  {
    if (ListaSequencial[j].RG <= ListaSequencial[pivot].RG)
    {
      comparacao++;
      i++;
      swap(ListaSequencial[i], ListaSequencial[j]);
      copia++;
    }
  }

  swap(ListaSequencial[i + 1], ListaSequencial[high]);
  copia++;
  return i+1;
}
void QuickSortSequencial(NomeRGSeq ListaSequencial[], int low, int high, int &copia, int &comparacao){

  if (low < high)
  {

    int pi = partition(ListaSequencial, low, high, copia, comparacao);


    QuickSortSequencial(ListaSequencial, low, pi-1, copia, comparacao);
    QuickSortSequencial(ListaSequencial, pi + 1, high, copia, comparacao);
  }


}

void Merge(NomeRGSeq ListaSequencial[], int low, int mid, int high, int &copia, int &comparacao){
  NomeRGSeq aux[high-low+1];
  int i = low, j = mid+1;
  int a=0;


  while(i <= mid && j <= high){
    if(ListaSequencial[i].RG < ListaSequencial[j].RG){
      comparacao++;
      aux[a]=ListaSequencial[i];
      copia++;
      i++;
    }else
    { aux[a]=ListaSequencial[j];
      copia++;
      j++;
    }
    a++;
  }


  while(i <= mid){
    aux[a]=ListaSequencial[i];
    copia++;
    i++;
    a++;
  }

  while(j <= high){
    aux[a]=ListaSequencial[j];
    copia++;
    j++;
    a++;
  }

  i=low;

  for(int c=0; c < a; c++, i++){
    ListaSequencial[i] = aux[c];
    copia++;
  }
}

void MergeSortSequencial(NomeRGSeq ListaSequencial[], int low, int high, int &copia, int &comparacao){

  if (low < high)
  {

    int mid = (low + high) / 2;

    MergeSortSequencial(ListaSequencial, low, mid, copia, comparacao);
    MergeSortSequencial(ListaSequencial, mid + 1, high, copia, comparacao);

    Merge(ListaSequencial, low, mid, high, copia, comparacao);

  }
}

void BuscaBinariaSequencial(int tamanho, NomeRGSeq ListaSequencial[]){

	auto start = std::chrono::high_resolution_clock::now();

	int copia=0, comparacao=0, RG, j;
	NomeRGSeq aux1[tamanho], aux2[tamanho];

	for(j=0; j < tamanho; j++){
        aux1[j] = ListaSequencial[j];
	}

	cout << endl << "Insira o RG que deseja procurar:";
	cin >> RG;

	//43022861 - POS 4404
	cout << endl;

	int inf = 0;     // limite inferior (o primeiro índice de vetor em C é zero          )
    int sup = tamanho-1; // limite superior (termina em um número a menos. 0 a 9 são 10 números)
    int meio;
    while (inf <= sup)
     {
        meio = (inf + sup)/2;
        if (RG == ListaSequencial[meio].RG){
            comparacao++;
            cout << meio+1 << " - " << ListaSequencial[meio].nome << ", " << ListaSequencial[meio].RG << endl;
        }
        if (RG < ListaSequencial[meio].RG){
            comparacao++;
            sup = meio-1;
        }
        else{
            inf = meio+1;
        }
     }

	auto result = std::chrono::high_resolution_clock::now() - start;
    long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
    cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
	cout << "Foram feitas " << comparacao << " comparacao(oes)" << endl;
}


//====================================================

int main() {
  int opt = 1;
  int flag1 = 1;//pra verificar se a memoria foi alocada
  int flag2 = 0;//pra verificar se o array foi ordenado
  //p/ busca binaria

  int tamanho;
  tamanho = getTamanho();
  //pega o tamanho do PRIMEIRO ARQUIVO
  //pra usar na alocacao e impressao


//=============SEQUENCIAL================
  NomeRGSeq *ListaSequencial = new NomeRGSeq[tamanho+5];
  //aloca memoria para ListaSequencial que é uma struct
  //do tipo NomeRGSeq
  //aloca mais pra garantir que as funções 1,2 e 10 vão funcionar, ESPECIALMENTE A 10

  ArmazenaSequencial(&tamanho, ListaSequencial);

//==============MAIN========================
  while(opt != 0){
  cout<<"\n\nEscolha uma operacao:"<<endl;
  cout<<"1- Insercao de um noh no inicio da lista."<<endl;
  cout<<"2- Insercao de um noh no fim da lista."<<endl;
  cout<<"3- Insercao de um noh na posicao N."<<endl;
  cout<<"4- Retirar de um noh no inicio da lista."<<endl;
  cout<<"5- Retirar de um noh no fim da lista."<<endl;
  cout<<"6- Retirar um noh na posicao N"<<endl;
  cout<<"7- Procurar um noh com o campo RG(Sequencial)"<<endl;
  cout<<"8- Procurar um noh com o campo RG(Binaria)"<<endl;
  cout<<"9- Mostrar a Lista na Tela"<<endl;
  cout<<"10- Salvar lista em um arquivo"<<endl;
  cout<<"11- Ler lista de um novo arquivo"<<endl;
  cout<<"12- Selection Sort"<<endl;
  cout<<"13- Insertion Sort"<<endl;
  cout<<"14- Bubble Sort"<<endl;
  cout<<"15- Shell Sort"<<endl;
  cout<<"16- Quick Sort"<<endl;
  cout<<"17- Merge Sort"<<endl;
  cout<<"0- Sair do sistema"<<endl;
  cin >> opt;

  switch(opt){
    case 1:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    ListaSequencial = InsereInicioSeq(&tamanho, ListaSequencial);
    //InserirInicioEnc(&head);
    break;

    case 2:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    ListaSequencial = InsereFimSeq(&tamanho, ListaSequencial);
    //InseriFimEnc(&head);
    break;

    case 3:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    ListaSequencial = InserirNSeq(&tamanho, ListaSequencial);
    //InserirNEnc(&head);
    break;

    case 4:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    ListaSequencial = RemoveInicioSeq(&tamanho, ListaSequencial);
    //RemoveInicioEnc(&head);
    break;

    case 5:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    ListaSequencial = RemoveFimSeq(&tamanho, ListaSequencial);
    //RemoveFimEnc(&head);
    break;

    case 6:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    ListaSequencial = RemoveNSeq(&tamanho, ListaSequencial);
    //RemoveNEnc(&head);
    break;

    case 7:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    ProcurarRGSeq(&tamanho, ListaSequencial);
    //ProcurarRGEnc(&head);
    break;

    case 8:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    if(flag2 == 0){
      cout <<"Arquivo não Ordenado. Execute uma ordenação."<<endl;
      break;
    }
    BuscaBinariaSequencial(tamanho, ListaSequencial);
    break;

    case 9:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    cout<<"Lista Sequencial:"<<endl;
    ImprimeSequencial(tamanho, ListaSequencial);
    //cout<<"\nLista Encadeada:"<<endl;
    //ImprimeEncadeada(&head);
    break;

    case 10:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    EscreveArquivoSeq(tamanho, ListaSequencial);
    cout << "PRONTO";
    break;

    case 11:
    ArmazenaSequencial(&tamanho, ListaSequencial);
    //ArmazenaEncadeada(&head);
    flag1 = 1;
    break;

    case 12:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    SelectionSortSequencial(tamanho, ListaSequencial);
    //SelectionSortEncadeada(tamanho, &head);
    flag2 = 1;
    break;

    case 13:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    InsertionSortSequencial(tamanho, ListaSequencial);
    flag2 = 1;
    break;

    case 14:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    BubbleSortSequencial(tamanho, ListaSequencial);
    flag2 = 1;
    break;

    case 15:
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    ShellSortSequencial(tamanho, ListaSequencial);
    flag2 = 1;
    break;

    case 16: {
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    auto start = std::chrono::high_resolution_clock::now();
    int copia=0, comparacao=0;
    QuickSortSequencial(ListaSequencial, 0, tamanho-1, copia, comparacao);
    flag2 = 1;
    auto result = std::chrono::high_resolution_clock::now() - start;
    long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
    cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
	cout << "Foram feitas " << comparacao << " comparacao(oes)" << endl;
    break;
    }

    case 17:{
    if(flag1 == 0){
      cout << "Arquivo não armazenado. Execute a opção 11." << endl;
      break;
    }
    auto start = std::chrono::high_resolution_clock::now();
    int copia=0, comparacao=0;
    MergeSortSequencial(ListaSequencial, 0, tamanho-1, copia, comparacao);
    flag2 = 1;
    auto result = std::chrono::high_resolution_clock::now() - start;
    long long microsegundos = std::chrono::duration_cast<std::chrono::microseconds>(result).count();
    cout << "A execucao demorou " << microsegundos << " microsegundo(s)" << endl;
	cout << "Foram feitas " << copia << " copia(as)" << endl;
	cout << "Foram feitas " << comparacao << " comparacao(oes)" << endl;
    break;
    }

    case 0:
    cout<<"Saindo..."<<endl;
    return 0;
    break;

    default:
    cout<<"Opcao Invalida."<<endl;
    break;
  }
  }
}
